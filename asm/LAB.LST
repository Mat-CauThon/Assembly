Turbo Assembler	 Version 4.0	    31/10/18 12:06:28	    Page 1
lab.asm



      1	0000			     STSEG SEGMENT PARA	STACK "STACK"
      2	0000  40*(53 54	41 43 4B)    DB	64 DUP ( "STACK" )
      3	0140			     STSEG ENDS
      4
      5
      6
      7	0000			     DSEG SEGMENT PARA PUBLIC "DATA"
      8
      9	0000  07 ?? 05*(3F)	     userNumber	DB 7,?,5 dup('?')    ;Запись максимальной длины в	    +
     10				     первый байт буфера	и обнуление второго байта		    +
     11				     (фактической длины)
     12	0007  20 20 20 45 52 52	4F+  error_test	DB '   ERROR $'
     13	      52 20 24
     14	0011  59 6F 75 72 20 6E	75+  your_num DB 'Your number is -> $'
     15	      6D 62 65 72 20 69	73+
     16	      20 2D 3E 20 24
     17	0024  57 72 69 74 65 20	79+  write_num DB 'Write your number ->	$'
     18	      6F 75 72 20 6E 75	6D+
     19	      62 65 72 20 2D 3E	20+
     20	      24
     21
     22	003A			     DSEG ENDS
     23
     24	0000			     CSEG SEGMENT PARA PUBLIC "CODE"
     25	0000			     MAIN PROC FAR
     26				     ASSUME CS:	CSEG, DS: DSEG,	SS: STSEG
     27				     ; адреса повернення
     28	0000  1E			     PUSH DS
     29	0001  33 C0			     XOR AX, AX
     30	0003  50			     PUSH AX
     31
     32	0004  B8 0000s			     MOV AX, DSEG
     33	0007  8E D8			     MOV DS, AX
     34
     35
     36				     ;;;;;
     37
     38	0009  BA 0024r			     lea dx, write_num
     39	000C  B4 09			     mov ah,9
     40	000E  CD 21			     int 21h
     41
     42				     ;;;;;
     43
     44	0010			     input_str:
     45	0010  B0 07			     mov al,7
     46	0012  8B C8			 mov cx,ax		 ;Сохранение AX в CX
     47	0014  B4 0A			 mov ah,0Ah		 ;Функция DOS 0Ah - ввод строки в буфер
     48	0016  BA 0000r			 lea dx,userNumber	 ;DX = aдрес буфера
     49	0019  CD 21			 int 21h		 ;Обращение к	функции DOS
     50	001B  A0 0001r			 mov al,[userNumber+1]	 ;AL = длина введённой строки
     51	001E  83 C2 02			 add dx,2		 ;DX = адрес строки
     52	0021  8A E5			 mov ah,ch		 ;Восстановление AH
     53
     54
     55				     ;;;;;
     56
     57
Turbo Assembler	 Version 4.0	    31/10/18 12:06:28	    Page 2
lab.asm



     58	0023			     neg_number:
     59
     60	0023  84 C0			 test al,al		 ;Проверка длины строки
     61	0025  74 63			 jz error		 ;Если равно 0, возвращаем ошибку
     62	0027  8B DA			 mov bx, offset	dx	     ;BX = адрес строки
     63	0029  8A 1F			 mov bl,[bx]		 ;BL = первый символ строки
     64	002B  80 FB 2D			 cmp bl,'-'		 ;Сравнение первого символа с '-'
     65	002E  75 03			 jne stsdw_no_sign	 ;Если не	равно, то преобразуем	как	    +
     66				     число	без знака
     67	0030  42			 inc dx			 ;Инкремент адреса строки
     68	0031  FE C8			 dec al			 ;Декремент длины	строки
     69	0033			     stsdw_no_sign:
     70	0033  E8 0061			 call number_module	      ;Преобразуем строку в слово без	    +
     71				     знака
     72	0036  72 52			     jc	error
     73	0038  80 FB 2D			 cmp bl,'-'		 ;Снова проверяем	знак
     74	003B  75 0A			 jne stsdw_plus		 ;Если первый	символ не '-', то число	    +
     75				     положительное
     76	003D  3D 8000			 cmp ax,32768		 ;Модуль отрицательного числа должен +
     77				     быть не больше	32768
     78	0040  77 48			 ja error		     ;Если больше (без знака),		    +
     79				     возвращаем ошибку
     80	0042  F7 D8			 neg ax			 ;Инвертируем число
     81	0044  EB 06 90			 jmp stsdw_ok		 ;Переход к нормальному завершению	    +
     82				     процедуры
     83	0047			     stsdw_plus:
     84	0047  3D 7FFF			 cmp ax,32767		 ;Положительное число	должно быть не  +
     85				     больше 32767
     86	004A  77 3E			 ja error			 ;Если больше	(без	знака),		    +
     87				     возвращаем ошибку
     88	004C			     stsdw_ok:
     89	004C  F8			 clc			 ;CF = 0
     90
     91				     ;;;;;   вывод
     92
     93
     94
     95	004D  33 D2			     xor dx,dx
     96	004F  33 DB			     xor bx,bx
     97	0051  BB 0003			     mov bx,3
     98	0054  F7 F3			     div bx
     99	0056  8B DA			     mov bx,dx
    100	0058  B8 0003			     mov ax,03	     ;;	 очистка	экрана
    101	005B  CD 10			     int 10h	     ;;
    102
    103	005D  BA 0011r			     lea dx, your_num	     ;;
    104	0060  B4 09			     mov ah,9			     ;;	 вывод сообщения
    105	0062  CD 21			     int 21h			     ;;
    106
    107	0064  0B DB			     or	bx, bx
    108	0066  79 06			     jns m1
    109	0068  B0 2D			     mov al, '-'
    110	006A  CD 29			     int 29h
    111	006C  F7 DB			     neg bx
    112	006E				     m1:
    113	006E  8B C3			     mov ax, bx
    114	0070  33 C9			     xor cx, cx
Turbo Assembler	 Version 4.0	    31/10/18 12:06:28	    Page 3
lab.asm



    115	0072  BB 000A			     mov bx, 10
    116	0075				     m2:
    117	0075  33 D2			     xor dx, dx
    118	0077  F7 F3			     div bx
    119	0079  80 C2 30			     add dl, '0'
    120	007C  52			     push dx
    121	007D  41			     inc cx
    122	007E  85 C0			     test ax, ax
    123	0080  75 F3			     jnz m2
    124	0082				     m3:
    125	0082  58			     pop ax
    126	0083  CD 29			     int 29h
    127	0085  E2 FB			     loop m3
    128
    129	0087  EB 0D 90			     jmp return_zero
    130
    131	008A			       error:
    132	008A  B8 0003				     mov ax,03	     ;;	 очистка	экрана
    133	008D  CD 10				     int 10h	     ;;
    134
    135	008F  BA 0007r				     lea dx,error_test		     ;;
    136	0092  B4 09				     mov ah,9				     ;;	  вывод сообщения
    137	0094  CD 21				     int 21h				     ;;
    138
    139	0096			      return_zero:
    140
    141	0096  CB		     RET
    142
    143	0097			     MAIN ENDP
    144
    145
    146	0097			      number_module:
    147	0097  51			 push cx		 ;Сохранение всех	используемых	    +
    148				     регистров
    149	0098  52			 push dx
    150	0099  53			 push bx
    151	009A  56			 push si
    152	009B  57			 push di
    153
    154	009C  8B F2			 mov si, offset	dx	 ;SI = адрес строки
    155	009E  BF 000A			 mov di,10		 ;DI = множитель 10 (основание системы	    +
    156				     счисления)
    157
    158					     ;movcs cx,al не работает, спросить почему!
    159	00A1  33 C9			     xor cx,cx
    160	00A3  8A C8			     mov cl,al
    161
    162	00A5  33 C0			 xor ax,ax		 ;AX = 0
    163	00A7  33 DB			 xor bx,bx		 ;BX = 0
    164
    165	00A9			     studw_lp:
    166	00A9  8A 1C			 mov bl,[si]		 ;Загрузка в BL очередного символа	    +
    167				     строки
    168	00AB  46			 inc si			 ;Инкремент адреса
    169	00AC  80 FB 30			 cmp bl,'0'		 ;Если код символа меньше кода '0'
    170	00AF  72 15			 jb studw_error		 ; возвращаем	ошибку
    171	00B1  80 FB 39			 cmp bl,'9'		 ;Если код символа больше кода '9'
Turbo Assembler	 Version 4.0	    31/10/18 12:06:28	    Page 4
lab.asm



    172	00B4  77 10			 ja studw_error		 ; возвращаем	ошибку
    173	00B6  80 EB 30			 sub bl,'0'		 ;Преобразование символа-цифры в	    +
    174				     число
    175	00B9  F7 E7			 mul di			 ;AX = AX * 10
    176	00BB  72 09			 jc studw_error		 ;Если результат больше 16 бит - ошибка
    177	00BD  03 C3			 add ax,bx		 ;Прибавляем цифру
    178	00BF  72 05			 jc studw_error		 ;Если переполнение - ошибка
    179	00C1  E2 E6			 loop studw_lp		 ;Команда цикла
    180	00C3  EB 04 90			 jmp studw_exit		 ;Успешное завершение	(здесь всегда CF +
    181				     = 0)
    182
    183	00C6			     studw_error:
    184	00C6  33 C0			 xor ax,ax		 ;AX = 0
    185	00C8  F9			 stc			 ;CF = 1 (Возвращаем ошибку)
    186
    187	00C9			     studw_exit:
    188	00C9  5F			 pop di			 ;Восстановление регистров
    189	00CA  5E			 pop si
    190	00CB  5B			 pop bx
    191	00CC  5A			 pop dx
    192	00CD  59			 pop cx
    193	00CE  C3			 ret
    194
    195	00CF			     CSEG ENDS
    196				     END MAIN
Turbo Assembler	 Version 4.0	    31/10/18 12:06:28	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "31/10/18"
??FILENAME			  Text	 "lab	  "
??TIME				  Text	 "12:06:28"
??VERSION			  Number 0400
@CPU				  Text	 0101H
@CURSEG				  Text	 CSEG
@FILENAME			  Text	 LAB
@WORDSIZE			  Text	 2
ERROR				  Near	 CSEG:008A
ERROR_TEST			  Byte	 DSEG:0007
INPUT_STR			  Near	 CSEG:0010
M1				  Near	 CSEG:006E
M2				  Near	 CSEG:0075
M3				  Near	 CSEG:0082
MAIN				  Far	 CSEG:0000
NEG_NUMBER			  Near	 CSEG:0023
NUMBER_MODULE			  Near	 CSEG:0097
RETURN_ZERO			  Near	 CSEG:0096
STSDW_NO_SIGN			  Near	 CSEG:0033
STSDW_OK			  Near	 CSEG:004C
STSDW_PLUS			  Near	 CSEG:0047
STUDW_ERROR			  Near	 CSEG:00C6
STUDW_EXIT			  Near	 CSEG:00C9
STUDW_LP			  Near	 CSEG:00A9
USERNUMBER			  Byte	 DSEG:0000
WRITE_NUM			  Byte	 DSEG:0024
YOUR_NUM			  Byte	 DSEG:0011

Groups & Segments		  Bit Size Align  Combine Class

CSEG				  16  00CF Para	  Public  CODE
DSEG				  16  003A Para	  Public  DATA
STSEG				  16  0140 Para	  Stack	  STACK
